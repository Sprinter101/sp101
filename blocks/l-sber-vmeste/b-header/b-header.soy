{namespace sv.lSberVmeste.bHeader.Template}

/**
 * @constructor
 * @extends cl.iControl.Template
 */
{template .header}
    {call .init data="all"/}
{/template}

/**
 * @override
 * @param params {{
 *      config: {
           type: string,
 *         roundButton: ?string,
 *         choice_phrase: ?string
 *     }
 *  }}
 */
{template .body}
    {let $headerType: $params.config.type/}
    <div class="{call .rootClass/}__inner-wrap{sp}
        {call .rootClass/}__inner-wrap_{$headerType}">
    <div class="{call .rootClass/}__left-column">
        {let $hiddenLogo: $headerType == 'profile' ? false : true /}
            {call .icon}
                {param wrapper: 'logo'/}
                {param iconType: 'logo-sber'/}
                {param hidden: $hiddenLogo/}
            {/call}
        {let $arrowBack: $headerType == 'card' ? 'arrow-back_grey' :
            'arrow-back_white' /}
        {let $hiddenArrow: $headerType == 'profile' ? true : false /}
        {call .icon}
            {param wrapper: 'back'/}
            {param iconType: $arrowBack/}
            {param hidden: $hiddenArrow/}
        {/call}
    </div>
    <div class="{call .rootClass/}__right-column">
        {let $hiddenHelp: $headerType == 'card' ? true : false /}
        {let $help_phrase: $params.config?.help_phrase /}
            {call .help}
                {param help_phrase: $help_phrase /}
                {param hidden: $hiddenHelp/}
            {/call}
        {let $hiddenShare: $headerType == 'card' ? false : true /}
            {call .icon}
                {param wrapper: 'share'/}
                {param iconType: 'share'/}
                {param hidden: $hiddenShare/}
            {/call}
        </div>
        <div class="{call .rootClass/}__central-column">
        {let $hiddenButton: $headerType == 'profile' ? false : 
            $headerType == 'list' ? false : true /}
        {let $roundButton: $params.config?.roundButton /}
            {call .button }
                {param roundButton: $roundButton/}
                {param hidden: $hiddenButton /}
            {/call}
        {let $hiddenChoice: $headerType == 'profile' ? true : false /}
        {let $choice_phrase: $params.config?.choice_phrase /}
            {call .choicePhrase}
                {param choice_phrase: $choice_phrase /}
                {param headerType: $headerType /}
                {param hidden: $hiddenChoice/}
            {/call}
        </div>
    </div>
{/template}

/**
 * icon template
 * @param wrapper {string},
 * @param iconType {string},
 * @param hidden {?bool}
 */
{template .icon}
    <div class="{call .rootClass/}__icon-wrapper{sp}
        {call .rootClass/}__{$wrapper}-wrapper{if $hidden}
        {sp}{call .hidden/}{/if}">
            {call .renderChild}
                {param params: [
                    'type': 'IconSber',
                    'renderParams': [
                        'data': ['type': $iconType],
                        'config': []
                    ]
                ]/}
            {/call}
    </div>
{/template}

/**
 * button template
 * @param roundButton {string},
 * @param hidden {?bool}
 */
{template .button}
    {let $buttonType: $roundButton == 'X' ? 'b-header__button_close' :
        'b-header__button_me' /}
    {let $buttonStyleTransparent: $roundButton == 'X' ? 
        'background_transparent' : '' /}
    {let $buttonStyleTextColor: $roundButton == 'X' ? 
        'text-color_white' : ''/}
    {let $buttonStyleBorder: $roundButton == 'X' ? 'border_yellow' : '' /}
    <div class="{call .rootClass/}__button-wrapper{if $hidden}
        {sp}{call .hidden/}{/if}">
            {call .renderChild}
                {param params: [
                    'type': 'ButtonSber',
                    'renderParams': [
                        'data': [
                            'content': $roundButton,
                        ],
                        'config': [
                        'buttonStyles': 
                        ['width_m', 'height_big', 'font_SFUI',
                            $buttonStyleTransparent, $buttonStyleTextColor,
                            $buttonStyleBorder],
                        'customClasses': 
                            [$buttonType]
                        ]
                    ]
                ]/}
            {/call}
    </div>
{/template}

/**
 * Div for cards' filter category
 * @param headerType {?string}
 * @param choice_phrase {string}
 * @param hidden {?bool}
 */
{template .choicePhrase}
    {if $headerType == 'card'}
        <div class="{call .rootClass/}__choice-phrase{sp}
            {call .rootClass/}__choice-phrase_{$choice_phrase}{sp}
            {call .rootClass/}__choice-phrase_{$headerType}{sp}{if $hidden}{sp}
            {call .hidden/}{/if}">
    {else}
        <div class="{call .rootClass/}__choice-phrase{sp}
            {call .rootClass/}__choice-phrase_{$choice_phrase}{if $hidden}{sp}
            {call .hidden/}{/if}">
    {/if}
        {switch $choice_phrase}
            {case 'list'}
                Начните помогать
            {case 'theme'}
                Тема
            {case 'direction'}
                Направление
            {case 'fund'}
                Фонд
            {case 'donation'}
                Выберите тип финансирования
            {default}
                Направление
        {/switch}
    </div>
{/template}


/**
 * Div for help link about
 * @param help_phrase {string}
 * @param hidden {?bool}
 */
{template .help}
    <div class="{call .rootClass/}__help{sp}
        {call .rootClass/}__help_{$help_phrase}{if $hidden}{sp}
        {call .hidden/}{/if}">
        <div class="{call .rootClass/}__help-text">
        {switch $help_phrase}
            {case 'about_profile'}
                О проекте
            {case 'about_list'}
                О проекте
            {case 'donation'}
                Что делать?
            {default}
                О проекте
            {/switch}
        </div>
    </div>
{/template}

/**
 * @override
 */
{template .rootClass}
    b-header
{/template}

/**
* @param? params {{
 *     config: {
 *         type: ?string
 *     }
 *  }}
*/
{template .additionalClasses}
    {let $type: $params.config?.type/}
        {call .rootClass/}_{$type}
{/template}

/**
 * Additional class for hiding unwanted 
 * for this headerType element
 */
{template .hidden}
    i-utils__hidden
{/template}