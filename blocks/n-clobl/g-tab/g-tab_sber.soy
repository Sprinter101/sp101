{namespace sv.gTab.Template}


/**
 * The button template
 * @extends cl.gTab.Template
 * @constructor
 */
{template .tab}
    {call .init data="all" /}
{/template}

/**
 * Body
 * @param? params {{
 *     data: {
 *         tabs: list<{
 *             label: ?string,
 *             content: {
 *                  childToRender: {
 *                      type: string,
 *                      soyParams: Object,
 *                      jsParams: Object
 *                  },
 *                  text: ?string
 *             }
 *         }>,
 *         selectedTabId: ?number
 *     },
 *     config: {
 *         noDefaultTab: ?bool
 *     }
 * }}
 * @override
 */
{template .body}
    {let $selectedTabId: $params.data?.selectedTabId ?:
        $params.config?.noDefaultTab ? (-1) : 0 /}
    {call .tabs data="all"/}
    {for $i in range($params?.data?.tabs?.length)}
        {call .content}
            {param params: [
                'content': $params.data.tabs[$i].content,
                'hidden': not($i == $selectedTabId),
                'tabClasses': $params?.config?.tabClasses?.content ? 
                            $params?.config?.tabClasses?.content : []
            ]/}
        {/call}
    {/for}
    {call .placeholder data="all"/}
{/template}

/**
 * Content template
 * @param params {{
 *     hidden: ?bool,
 *     content: {
 *         childToRender: {
 *             type: string
 *         }
 *     }
 * }}
 * @override
 */
{template .content}
    {let $type: $params.content?.childToRender?.type /}
    <div class="{call .rootClass/}__content
        {$params?.hidden ? ' i-utils__hidden' : ''}{call .contentClasses data="all" /}"
        {if $type}
            {let $data: [
                'type': $params.content.childToRender.type,
                'jsParams': $params.content.childToRender.jsParams
            ]/}
            {sp}data-params="{call goog.json.serialize data="$data" /}"
        {/if}
        >
        {call .innerContent data="all"/}
    </div>
{/template}

/**
* Adds classes to the content element
* @param? params
* @override
*/
{template .contentClasses}
    {let $contentClasses: $params?.tabClasses /}
    {for $i in range($contentClasses.length)}
        {sp}{call .rootClass/}__content_{$contentClasses[$i]}
    {/for}
{/template}

/**
 * Inner content template
 * @param params {{
 *          childToRender: {
 *              type: string,
 *              soyParams: list
 *          },
 *          text: ?string
 *     }
 * }}
 * @override
 */
{template .innerContent}
    {if $params?.content?.childToRender}
        {call .renderInnerContent_ data="all" /}
    {else}
        {$params?.content?.text}
    {/if}
{/template}

/**
 * Renders inner content
 * @param params {{
 *          childToRender: {
 *              type: string,
 *              soyParams: list
 *          },
 *          text: ?string
 *     }
 * }}
 */
{template .renderInnerContent_ autoescape="strict" kind="html"}
    {let $type: $params.content.childToRender.type /}
    {let $soyParams: $params.content.childToRender.soyParams /}
    {call .renderChild}
      {param params: [
            'type': $type,
            'renderParams': $soyParams
        ]/}
    {/call}
{/template}
